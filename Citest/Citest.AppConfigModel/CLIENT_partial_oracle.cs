//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Citest.AppConfigModel
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using System.Text;
    using Oracle.DataAccess.Client;

    public partial class CLIENT : IOracleEntity
    {
        public override bool Equals(object obj)
        {
            return Equals(obj as CLIENT);
        }

        public bool Equals(CLIENT other)
        {
            if (other == null)
            {
                return false;
            }

            return CLIENT_ID == other.CLIENT_ID;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return CLIENT_ID.GetHashCode();
            }
        }

        void IOracleEntity.Materialize(IDataRecord input, IFieldsCaster caster)
        {
            CLIENTONECODE = input.IsDBNull(0) ? null : input.GetString(0);
            CONTROL_ID = input.IsDBNull(1) ? null : input.GetString(1);
            CLIENT_NUMBER = caster.GetRecord<long>(2, input);
            CLIENT_ID = input.IsDBNull(3) ? null : input.GetString(3);
        }

        Type[] IOracleEntity.GetFieldTypes()
        {
            return new[]
            {
                typeof(string),
                typeof(string),
                typeof(long),
                typeof(string),
            };
        }

        string IOracleEntity.GetOracleInsertRequest(string schemaName)
        {
            return "INSERT INTO " + schemaName + "CLIENT (CLIENTONECODE, CONTROL_ID, CLIENT_NUMBER, CLIENT_ID) VALUES (:parm1, :parm2, :parm3, :parm4) ";
        }

        string IOracleEntity.GetOracleUpdateRequest(string schemaName)
        {
            return "UPDATE " + schemaName + "CLIENT\r\n"
                + "SET CLIENTONECODE = :parm1,\r\n"
                + "    CONTROL_ID = :parm2,\r\n"
                + "    CLIENT_NUMBER = :parm3\r\n"
                + "WHERE CLIENT_ID = :parm4\r\n";
        }

        string IOracleEntity.GetOracleDeleteRequest(string schemaName)
        {
            return "DELETE " + schemaName + "CLIENT\r\n"
                + "WHERE CLIENT_ID = :parm1\r\n";
        }

        OracleParameter IOracleEntity.AddOracleInsertParameters(IEnumerable<IOracleEntity> entities, OracleCommand command)
        {
            ((IOracleEntity)this).AddOracleUpdateParameters(entities, command);
            return null;
        }

        void IOracleEntity.AddOracleUpdateParameters(IEnumerable<IOracleEntity> entities, OracleCommand command)
        {
            var parm1 = new List<string>();
            var parm2 = new List<string>();
            var parm3 = new List<long>();
            var parm4 = new List<string>();
            foreach (var entity in entities.Cast<CLIENT>())
            {
                parm1.Add(entity.CLIENTONECODE);
                parm2.Add(entity.CONTROL_ID);
                parm3.Add(entity.CLIENT_NUMBER);
                parm4.Add(entity.CLIENT_ID);
            }

            command.BindByName = true;
            command.ArrayBindCount = parm1.Count;
            command.Parameters.Add("parm1", OracleDbType.Varchar2, parm1.ToArray(), ParameterDirection.Input);
            command.Parameters.Add("parm2", OracleDbType.Varchar2, parm2.ToArray(), ParameterDirection.Input);
            command.Parameters.Add("parm3", OracleDbType.Int64, parm3.ToArray(), ParameterDirection.Input);
            command.Parameters.Add("parm4", OracleDbType.Char, parm4.ToArray(), ParameterDirection.Input);
        }

        void IOracleEntity.AddOracleDeleteParameters(IEnumerable<IOracleEntity> entities, OracleCommand command)
        {
            var parm1 = new List<string>();
            foreach (var entity in entities.Cast<CLIENT>())
            {
                parm1.Add(entity.CLIENT_ID);
            }

            command.BindByName = true;
            command.ArrayBindCount = parm1.Count;
            command.Parameters.Add("parm1", OracleDbType.Char, parm1.ToArray(), ParameterDirection.Input);
        }

        void IOracleEntity.ApplyOutParameter<T>(OracleParameter outParameter, List<T> list)
        {
        }
    }
}
