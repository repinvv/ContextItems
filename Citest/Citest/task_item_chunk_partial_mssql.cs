//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Citest
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Text;

    public partial class task_item_chunk : IMsSqlEntity
    {
        public static string SequenceName = "task_item_chunk_seq";
        public override bool Equals(object obj)
        {
            return Equals(obj as task_item_chunk);
        }

        public bool Equals(task_item_chunk other)
        {
            if (other == null)
            {
                return false;
            }

            bool equal = chunk_id == other.chunk_id;
            return equal && task_item_id == other.task_item_id;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                int hash = chunk_id.GetHashCode();
                return (hash * 397) ^ task_item_id.GetHashCode();
            }
        }

        void IMsSqlEntity.Materialize(IDataRecord input)
        {
            chunk_id = input.GetInt32(0);
            task_item_id = input.GetInt32(1);
            dummy = input.GetBoolean(2);
        }

        bool IMsSqlEntity.HasIdentity()
        {
            return true;
        }

        int IMsSqlEntity.GetNumberOfFields()
        {
            return 3;
        }

        string IMsSqlEntity.GetTableName()
        {
            return "dbo.task_item_chunk";
        }

        string IMsSqlEntity.GetMsSqlInsertRequest()
        {
            return "INSERT INTO dbo.task_item_chunk\r\n" +
                "  (task_item_id, dummy)\r\n" +
                "OUTPUT inserted.chunk_id\r\n" +
                "VALUES\r\n";
        }

        string IMsSqlEntity.GetMsSqlInsertValues(int i)
        {
            return "(@parm1i" + i + ", @parm2i" + i + ")";
        }

        IEnumerable<SqlParameter> IMsSqlEntity.GetMsSqlInsertParameters(int index)
        {
            yield return new SqlParameter("parm1i" + index, task_item_id);
            yield return new SqlParameter("parm2i" + index, dummy);
        }

        void IMsSqlEntity.PopulateIdentity(IDataRecord input)
        {
            chunk_id = (int)input["chunk_id"];
        }

        object IMsSqlEntity.GetValue(int i)
        {
            switch (i)
            {
                case 0:
                    return chunk_id;
                case 1:
                    return task_item_id;
                case 2:
                    return dummy;
            }

            return null;
        }

        string IMsSqlEntity.GetSequenceName()
        {
            return SequenceName;
        }

        void IMsSqlEntity.SetSequence<T>(List<T> list, object seq)
        {
            throw new Exception("Sequenced insert is not applicable to this entity");
        }

        string IMsSqlEntity.GetUpdateRequest(int index)
        {
            return "UPDATE dbo.task_item_chunk\r\n" +
                "SET dummy = @parm1i" + index + "\r\n" +
                "WHERE chunk_id = @parm2i" + index + "," +
                "  AND task_item_id = @parm3i" + index + ";";
        }

        IEnumerable<SqlParameter> IMsSqlEntity.GetUpdateParameters(int index)
        {
            yield return new SqlParameter("parm1i" + index, dummy);
            yield return new SqlParameter("parm2i" + index, chunk_id);
            yield return new SqlParameter("parm3i" + index, task_item_id);
        }

        string IMsSqlEntity.GetBulkUpdateRequest(string table)
        {
            return "UPDATE dbo.task_item_chunk\r\n" +
                "SET dummy = s.dummy\r\n" +
                "FROM dbo.task_item_chunk tj \r\n" +
                "INNER JOIN " + table + " s\r\n" +
                "ON  tj.chunk_id = s.chunk_id,\r\n" +
                "  AND tj.task_item_id = s.task_item_id\r\n";
        }

        string IMsSqlEntity.GetCreateTempTableRequest(string table)
        {
            return "CREATE TABLE " + table + "\r\n" +
                "(\r\n" +
                "chunk_id int,\r\n" +
                "task_item_id int,\r\n" +
                "dummy bit,\r\n" +
                ")";
        }

        int IMsSqlEntity.GetNumberOfKeyFields()
        {
             return 2;
        }

        string IMsSqlEntity.GetDeleteRequest(int index)
        {
            return "DELETE FROM dbo.task_item_chunk\r\n" +
                "WHERE chunk_id = @parm1i" + index + "," +
                "  AND task_item_id = @parm2i" + index + ";";
        }

        IEnumerable<SqlParameter> IMsSqlEntity.GetDeleteParameters(int index)
        {
            yield return new SqlParameter("parm1i" + index, chunk_id);
            yield return new SqlParameter("parm2i" + index, task_item_id);
        }

        string IMsSqlEntity.GetBulkDeleteRequest(string table)
        {
            return "DELETE t FROM dbo.task_item_chunk t\r\n" +
                "INNER JOIN " + table + " s\r\n" +
                "ON  t.chunk_id = s.chunk_id\r\n" +
                "  AND t.task_item_id = s.task_item_id\r\n";
        }

        string IMsSqlEntity.GetCreateIdTableRequest(string table)
        {
            return "CREATE TABLE " + table + "\r\n" +
                "(\r\n" +
                "chunk_id int,\r\n" +
                "task_item_id int,\r\n" +
                ")";
        }

        object IMsSqlEntity.GetKeyValue(int i)
        {
            switch (i)
            {
                case 0:
                    return chunk_id;
                case 1:
                    return task_item_id;
            }

            return null;
        }
    }
}
