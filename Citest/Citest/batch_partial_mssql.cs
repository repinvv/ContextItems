//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Citest
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Text;

    public partial class batch : IMsSqlEntity
    {
        public static string SequenceName = "batch_seq";
        public override bool Equals(object obj)
        {
            return Equals(obj as batch);
        }

        public bool Equals(batch other)
        {
            if (other == null)
            {
                return false;
            }

            return batch_id == other.batch_id;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return batch_id.GetHashCode();
            }
        }

        void IMsSqlEntity.Materialize(IDataRecord input)
        {
            batch_id = input.GetGuid(0);
            task_type_id = input.GetInt32(1);
            chunk_init_parameters = input[2] as string;
            batch_complete_task_type_id = input[3] as int?;
            batch_complete_task_parameters = input[4] as string;
        }

        bool IMsSqlEntity.HasIdentity()
        {
            return false;
        }

        int IMsSqlEntity.GetNumberOfFields()
        {
            return 5;
        }

        string IMsSqlEntity.GetTableName()
        {
            return "dbo.batch";
        }

        string IMsSqlEntity.GetMsSqlInsertRequest()
        {
            return "INSERT INTO dbo.batch\r\n" +
                "  (batch_id, task_type_id, chunk_init_parameters, batch_complete_task_type_id, batch_complete_task_parameters)\r\n" +
                "VALUES\r\n";
        }

        string IMsSqlEntity.GetMsSqlInsertValues(int i)
        {
            return "(@parm1i" + i + ", @parm2i" + i + ", @parm3i" + i + ", @parm4i" + i + ", @parm5i" + i + ")";
        }

        IEnumerable<SqlParameter> IMsSqlEntity.GetMsSqlInsertParameters(int index)
        {
            yield return new SqlParameter("parm1i" + index, batch_id);
            yield return new SqlParameter("parm2i" + index, task_type_id);
            yield return new SqlParameter("parm3i" + index, chunk_init_parameters ?? (object)DBNull.Value);
            yield return new SqlParameter("parm4i" + index, batch_complete_task_type_id ?? (object)DBNull.Value);
            yield return new SqlParameter("parm5i" + index, batch_complete_task_parameters ?? (object)DBNull.Value);
        }

        void IMsSqlEntity.PopulateIdentity(IDataRecord input)
        {
        }

        object IMsSqlEntity.GetValue(int i)
        {
            switch (i)
            {
                case 0:
                    return batch_id;
                case 1:
                    return task_type_id;
                case 2:
                    return chunk_init_parameters;
                case 3:
                    return batch_complete_task_type_id;
                case 4:
                    return batch_complete_task_parameters;
            }

            return null;
        }

        string IMsSqlEntity.GetSequenceName()
        {
            return SequenceName;
        }

        void IMsSqlEntity.SetSequence<T>(List<T> list, object seq)
        {
            throw new Exception("Sequenced insert is not applicable to this entity");
        }

        string IMsSqlEntity.GetUpdateRequest(int index)
        {
            return "UPDATE dbo.batch\r\n" +
                "SET task_type_id = @parm1i" + index + ",\r\n" +
                "    chunk_init_parameters = @parm2i" + index + ",\r\n" +
                "    batch_complete_task_type_id = @parm3i" + index + ",\r\n" +
                "    batch_complete_task_parameters = @parm4i" + index + "\r\n" +
                "WHERE batch_id = @parm5i" + index + ";";
        }

        IEnumerable<SqlParameter> IMsSqlEntity.GetUpdateParameters(int index)
        {
            yield return new SqlParameter("parm1i" + index, task_type_id);
            yield return new SqlParameter("parm2i" + index, chunk_init_parameters ?? (object)DBNull.Value);
            yield return new SqlParameter("parm3i" + index, batch_complete_task_type_id ?? (object)DBNull.Value);
            yield return new SqlParameter("parm4i" + index, batch_complete_task_parameters ?? (object)DBNull.Value);
            yield return new SqlParameter("parm5i" + index, batch_id);
        }

        string IMsSqlEntity.GetBulkUpdateRequest(string table)
        {
            return "UPDATE dbo.batch\r\n" +
                "SET task_type_id = s.task_type_id,\r\n" +
                "    chunk_init_parameters = s.chunk_init_parameters,\r\n" +
                "    batch_complete_task_type_id = s.batch_complete_task_type_id,\r\n" +
                "    batch_complete_task_parameters = s.batch_complete_task_parameters\r\n" +
                "FROM dbo.batch tj \r\n" +
                "INNER JOIN " + table + " s\r\n" +
                "ON  tj.batch_id = s.batch_id\r\n";
        }

        string IMsSqlEntity.GetCreateTempTableRequest(string table)
        {
            return "CREATE TABLE " + table + "\r\n" +
                "(\r\n" +
                "batch_id uniqueidentifier,\r\n" +
                "task_type_id int,\r\n" +
                "chunk_init_parameters nvarchar(max),\r\n" +
                "batch_complete_task_type_id int,\r\n" +
                "batch_complete_task_parameters nvarchar(max),\r\n" +
                ")";
        }

        int IMsSqlEntity.GetNumberOfKeyFields()
        {
             return 1;
        }

        string IMsSqlEntity.GetDeleteRequest(int index)
        {
            return "DELETE FROM dbo.batch\r\n" +
                "WHERE batch_id = @parm1i" + index + ";";
        }

        IEnumerable<SqlParameter> IMsSqlEntity.GetDeleteParameters(int index)
        {
            yield return new SqlParameter("parm1i" + index, batch_id);
        }

        string IMsSqlEntity.GetBulkDeleteRequest(string table)
        {
            return "DELETE t FROM dbo.batch t\r\n" +
                "INNER JOIN " + table + " s\r\n" +
                "ON  t.batch_id = s.batch_id\r\n";
        }

        string IMsSqlEntity.GetCreateIdTableRequest(string table)
        {
            return "CREATE TABLE " + table + "\r\n" +
                "(\r\n" +
                "batch_id uniqueidentifier,\r\n" +
                ")";
        }

        object IMsSqlEntity.GetKeyValue(int i)
        {
            switch (i)
            {
                case 0:
                    return batch_id;
            }

            return null;
        }
    }
}
