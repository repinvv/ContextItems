//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Citest
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using System.Data.SqlClient;
    using System.Linq;
    using System.Text;

    public partial class task_item : IMsSqlEntity
    {
        public static string SequenceName = "task_item_seq";
        public override bool Equals(object obj)
        {
            return Equals(obj as task_item);
        }

        public bool Equals(task_item other)
        {
            if (other == null)
            {
                return false;
            }

            return task_item_id == other.task_item_id;
        }

        public override int GetHashCode()
        {
            unchecked
            {
                return task_item_id.GetHashCode();
            }
        }

        void IMsSqlEntity.Materialize(IDataRecord input)
        {
            task_item_id = input.GetInt32(0);
            batch_id = input.GetGuid(1);
            group_key = input[2] as string;
            exclusion_key = input[3] as string;
            task_parameters = input[4] as string;
        }

        bool IMsSqlEntity.HasIdentity()
        {
            return false;
        }

        int IMsSqlEntity.GetNumberOfFields()
        {
            return 5;
        }

        string IMsSqlEntity.GetTableName()
        {
            return "dbo.task_item";
        }

        string IMsSqlEntity.GetMsSqlInsertRequest()
        {
            return "INSERT INTO dbo.task_item\r\n" +
                "  (task_item_id, batch_id, group_key, exclusion_key, task_parameters)\r\n" +
                "VALUES\r\n";
        }

        string IMsSqlEntity.GetMsSqlInsertValues(int i)
        {
            return "(@parm1i" + i + ", @parm2i" + i + ", @parm3i" + i + ", @parm4i" + i + ", @parm5i" + i + ")";
        }

        IEnumerable<SqlParameter> IMsSqlEntity.GetMsSqlInsertParameters(int index)
        {
            yield return new SqlParameter("parm1i" + index, task_item_id);
            yield return new SqlParameter("parm2i" + index, batch_id);
            yield return new SqlParameter("parm3i" + index, group_key ?? (object)DBNull.Value);
            yield return new SqlParameter("parm4i" + index, exclusion_key ?? (object)DBNull.Value);
            yield return new SqlParameter("parm5i" + index, task_parameters ?? (object)DBNull.Value);
        }

        void IMsSqlEntity.PopulateIdentity(IDataRecord input)
        {
        }

        object IMsSqlEntity.GetValue(int i)
        {
            switch (i)
            {
                case 0:
                    return task_item_id;
                case 1:
                    return batch_id;
                case 2:
                    return group_key;
                case 3:
                    return exclusion_key;
                case 4:
                    return task_parameters;
            }

            return null;
        }

        string IMsSqlEntity.GetSequenceName()
        {
            return SequenceName;
        }

        void IMsSqlEntity.SetSequence<T>(List<T> list, object seq)
        {
            var sequence = (int)seq;
            list.ForEach(x => (x as task_item).task_item_id = sequence++);
        }

        string IMsSqlEntity.GetUpdateRequest(int index)
        {
            return "UPDATE dbo.task_item\r\n" +
                "SET batch_id = @parm1i" + index + ",\r\n" +
                "    group_key = @parm2i" + index + ",\r\n" +
                "    exclusion_key = @parm3i" + index + ",\r\n" +
                "    task_parameters = @parm4i" + index + "\r\n" +
                "WHERE task_item_id = @parm5i" + index + ";";
        }

        IEnumerable<SqlParameter> IMsSqlEntity.GetUpdateParameters(int index)
        {
            yield return new SqlParameter("parm1i" + index, batch_id);
            yield return new SqlParameter("parm2i" + index, group_key ?? (object)DBNull.Value);
            yield return new SqlParameter("parm3i" + index, exclusion_key ?? (object)DBNull.Value);
            yield return new SqlParameter("parm4i" + index, task_parameters ?? (object)DBNull.Value);
            yield return new SqlParameter("parm5i" + index, task_item_id);
        }

        string IMsSqlEntity.GetBulkUpdateRequest(string table)
        {
            return "UPDATE dbo.task_item\r\n" +
                "SET batch_id = s.batch_id,\r\n" +
                "    group_key = s.group_key,\r\n" +
                "    exclusion_key = s.exclusion_key,\r\n" +
                "    task_parameters = s.task_parameters\r\n" +
                "FROM dbo.task_item tj \r\n" +
                "INNER JOIN " + table + " s\r\n" +
                "ON  tj.task_item_id = s.task_item_id\r\n";
        }

        string IMsSqlEntity.GetCreateTempTableRequest(string table)
        {
            return "CREATE TABLE " + table + "\r\n" +
                "(\r\n" +
                "task_item_id int,\r\n" +
                "batch_id uniqueidentifier,\r\n" +
                "group_key nvarchar,\r\n" +
                "exclusion_key nvarchar,\r\n" +
                "task_parameters nvarchar(max),\r\n" +
                ")";
        }

        int IMsSqlEntity.GetNumberOfKeyFields()
        {
             return 1;
        }

        string IMsSqlEntity.GetDeleteRequest(int index)
        {
            return "DELETE FROM dbo.task_item\r\n" +
                "WHERE task_item_id = @parm1i" + index + ";";
        }

        IEnumerable<SqlParameter> IMsSqlEntity.GetDeleteParameters(int index)
        {
            yield return new SqlParameter("parm1i" + index, task_item_id);
        }

        string IMsSqlEntity.GetBulkDeleteRequest(string table)
        {
            return "DELETE t FROM dbo.task_item t\r\n" +
                "INNER JOIN " + table + " s\r\n" +
                "ON  t.task_item_id = s.task_item_id\r\n";
        }

        string IMsSqlEntity.GetCreateIdTableRequest(string table)
        {
            return "CREATE TABLE " + table + "\r\n" +
                "(\r\n" +
                "task_item_id int,\r\n" +
                ")";
        }

        object IMsSqlEntity.GetKeyValue(int i)
        {
            switch (i)
            {
                case 0:
                    return task_item_id;
            }

            return null;
        }
    }
}
